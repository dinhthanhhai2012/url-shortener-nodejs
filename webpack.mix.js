let mix = require('laravel-mix');

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

mix.setPublicPath('public')

mix
	.styles([
		'node_modules/bootstrap/dist/css/bootstrap.min.css',
		'resources/assets/css/colors.css',
		'resources/assets/css/style.css',
		'node_modules/izitoast/dist/css/iziToast.min.css'
	], 'public/css/styles.css')
	.scripts([
		'node_modules/jquery/dist/jquery.js',
		'node_modules/popper.js/dist/umd/popper.min.js',
		'node_modules/bootstrap/dist/js/bootstrap.min.js',
		'node_modules/izitoast/dist/js/iziToast.min.js'
	],'public/js/master.js')
	.version()

mix
	.styles([
		'node_modules/jssocials/dist/jssocials.css',
		'node_modules/jssocials/dist/jssocials-theme-minima.css'
	], 'public/css/stats.css')
	.styles([
		'resources/assets/css/login.css'
	], 'public/css/login.css')
	.scripts([
		'node_modules/jquery.typewatch/jquery.typewatch.js',
		'resources/assets/js/home.js'
	], 'public/js/home.js')
	.scripts([
		'node_modules/vue/dist/vue.min.js',
		'node_modules/axios/dist/axios.min.js',
		'node_modules/underscore/underscore-min.js',
		'node_modules/moment/min/moment.min.js',
		'resources/assets/js/users.js'
	], 'public/js/users.js')
	.scripts([
		"node_modules/moment/min/moment.min.js",
		'resources/assets/js/dashboard.js'
	], 'public/js/dashboard.js')
	.scripts([
		'node_modules/clipboard/dist/clipboard.min.js',
		"node_modules/jssocials/dist/jssocials.min.js",
		"node_modules/moment/min/moment.min.js",
		'resources/assets/js/stats.js'
	], 'public/js/stats.js')
	.version()

mix.copy('resources/assets/images', 'public/images', false);
mix.copy('resources/assets/manifest.json', 'public/manifest.json');

mix.copy('node_modules/jssocials/dist/jssocials-theme-minima.css.map','public/css/jssocials-theme-minima.css.map')
mix.copy('node_modules/bootstrap/dist/js/bootstrap.min.js.map','public/js/bootstrap.min.js.map')
mix.copy('node_modules/bootstrap/dist/css/bootstrap.min.css.map','public/css/bootstrap.min.css.map')
mix.copy('node_modules/axios/dist/axios.min.map','public/js/axios.min.map')

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
